# VoxelNeXt
本文为调试代码(细读代码)的记录，按kitti_dataset、nuscenes_dataset、demo、test、train的顺序进行

为便于代码分析，调试过程在本地完成

参考来源：

KITTI数据集介绍：https://blog.csdn.net/zyw2002/article/details/127395975

### 部分说明
ubuntu18.04、cuda11.8、python3.8、GPU3070、GPU Driver 520.61.05、torch2.0.0+cu118
## 一、kitti_dataset
### 1.1. kitti数据集介绍
```
OpenPCDet
├── data
│   ├── kitti
│   │   │── ImageSets
│   │   │   ├──test.txt & train.txt & trainval.txt & val.txt
│   │   │── training
│   │   │   ├──calib & velodyne & label_2 & image_2 & (optional: planes) & (optional: depth_2)
│   │   │── testing
│   │   │   ├──calib & velodyne & image_2
├── pcdet
├── tools
```
image_2 即2号彩色相机所拍摄的图片（.png）

calib对应每一帧的外参（.txt）

label_2是每帧的标注信息（.txt）

velodyne是Velodyne64所得的点云文件（.bin）
#### 1.1.1. calib
calib文件是相机、雷达、惯导等传感器的矫正数据。以“000001.txt”文件为例，内容如下：
```
P0: 7.215377000000e+02 0.000000000000e+00 6.095593000000e+02 0.000000000000e+00 0.000000000000e+00 7.215377000000e+02 1.728540000000e+02 0.000000000000e+00 0.000000000000e+00 0.000000000000e+00 1.000000000000e+00 0.000000000000e+00
P1: 7.215377000000e+02 0.000000000000e+00 6.095593000000e+02 -3.875744000000e+02 0.000000000000e+00 7.215377000000e+02 1.728540000000e+02 0.000000000000e+00 0.000000000000e+00 0.000000000000e+00 1.000000000000e+00 0.000000000000e+00
P2: 7.215377000000e+02 0.000000000000e+00 6.095593000000e+02 4.485728000000e+01 0.000000000000e+00 7.215377000000e+02 1.728540000000e+02 2.163791000000e-01 0.000000000000e+00 0.000000000000e+00 1.000000000000e+00 2.745884000000e-03
P3: 7.215377000000e+02 0.000000000000e+00 6.095593000000e+02 -3.395242000000e+02 0.000000000000e+00 7.215377000000e+02 1.728540000000e+02 2.199936000000e+00 0.000000000000e+00 0.000000000000e+00 1.000000000000e+00 2.729905000000e-03
R0_rect: 9.999239000000e-01 9.837760000000e-03 -7.445048000000e-03 -9.869795000000e-03 9.999421000000e-01 -4.278459000000e-03 7.402527000000e-03 4.351614000000e-03 9.999631000000e-01
Tr_velo_to_cam: 7.533745000000e-03 -9.999714000000e-01 -6.166020000000e-04 -4.069766000000e-03 1.480249000000e-02 7.280733000000e-04 -9.998902000000e-01 -7.631618000000e-02 9.998621000000e-01 7.523790000000e-03 1.480755000000e-02 -2.717806000000e-01
Tr_imu_to_velo: 9.999976000000e-01 7.553071000000e-04 -2.035826000000e-03 -8.086759000000e-01 -7.854027000000e-04 9.998898000000e-01 -1.482298000000e-02 3.195559000000e-01 2.024406000000e-03 1.482454000000e-02 9.998881000000e-01 -7.997231000000e-01
```
P0~P3：矫正后的相机投影矩阵R^(3*4)

R0_rect：矫正后的相机旋转矩阵R^(3*3)

Tr_velo_to_cam：从雷达到相机0的旋转平移矩阵R^(3*4)

Tr_imu_to_velo：从惯导或GPS装置到相机的旋转平移矩阵R^(3*4)
#### 1.1.2. image_2
image文件以8位PNG格式存储，图集如下：


### 1.2. 数据集初始化
```
python -m pcdet.datasets.kitti.kitti_dataset create_kitti_infos tools/cfgs/dataset_configs/kitti_dataset.yaml
```
















## 二、安装OpenPCDet环境
### 0、最便捷的方法
cuda11.8版本一样的话，直接到我这里拷贝环境
### a、复制现有torch环境作为基础
例如，将anaconda3/envs/torch20230517(一个能跑通YOLOP的torch环境)文件夹另存副本，改名为VoxelNeXt

然后更改anaconda3/envs/VoxelNeXt/bin/pip中的
```
#!/home/xingchen/anaconda3/envs/torch20230517/bin/python
```
为
```
#!/home/xingchen/anaconda3/envs/VoxelNeXt/bin/python
```
### d、运行setup文件安装部分依赖库
```
python setup.py develop
```
#### DUG1
运行步骤c报错
